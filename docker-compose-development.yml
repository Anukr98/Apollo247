version: '3.4'

services:
  nginx:
    image: nginx:1.14.2-alpine
    tty: true
    command: ash -c "nginx -t && nginx -g 'daemon off;'"
    ports:
      - 3000:3000
      - 4000:4000
    volumes:
      - ./nginx/log/:/var/log/nginx
      - ./nginx/conf.d/:/etc/nginx/conf.d/:ro
      - ./web/dist/:/usr/share/nginx/html/:ro 

  pgweb:
    image: sosedoff/pgweb:0.11.2
    ports:
      - 8081:8081

  web:
    image: node:11.11.0-alpine
    working_dir: /web
    command: ash -c "npm install --production=false && npm run start:dev"
    environment:
      # Make sure to keep these env vars synced with the following files:
      # cypress.json, webpack.config, and cypress/plugins/webpack-preprocessor
      # We should probably refactor this to a .env file...
      NPM_CONFIG_CACHE: /web/.npm-cache
      NODE_ENV: development
      WEB_CLIENT_PORT: 3000
      API_GATEWAY_PORT: 4000
      FIREBASE_PROJECT_NAME: apollo-patient-interface
      CYPRESS_INSTALL_BINARY: 0
    volumes:
      - ./web:/web:cached
    depends_on:
      - nginx

  api-gateway:
    image: node:11.11.0
    working_dir: /api/gateway
    command: >
      bash -c "npm install --production=false && 
               while ! curl -s http://profiles-service/graphql > /dev/null; 
                 do echo waiting for profiles-service...; 
                 sleep 5; 
               done; 
               npm run start:api-gateway"
    environment:
      NPM_CONFIG_CACHE: /api/.npm-cache
      NODE_ENV: development
      WEB_CLIENT_PORT: 3000
      API_GATEWAY_PORT: 4000
    volumes:
      - ./api:/api:cached
    depends_on:
      - profiles-service
      - nginx

  profiles-service:
    image: node:11.11.0
    working_dir: /api/services/profiles
    command: bash -c "npm install --production=false && npm dedupe && npm run start:profiles-service"
    environment:
      NPM_CONFIG_CACHE: /api/.npm-cache
      NODE_ENV: development
      GOOGLE_APPLICATION_CREDENTIALS: /api/services/profiles/firebase-secrets.json
      FIREBASE_PROJECT_NAME: apollo-patient-interface
    volumes:
      - ./api:/api:cached
    depends_on:
      - profiles-db

  profiles-db:
    image: postgres:10.8-alpine
    volumes:
      - ./api/services/profiles/init-profiles-db.sql:/docker-entrypoint-initdb.d/init.sql

