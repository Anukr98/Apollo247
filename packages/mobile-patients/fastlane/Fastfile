JS_APP_CONFIG_FILE_PATH = "../src/strings/AppConfig.ts"
APP_CONFIG_CODEPUSH_MAPPING = {
	"Production" => "PROD",
	"Staging" => "QA",
	"Dev" => "DEV",
	"QA2" => "QA2",
}
WEBENGAGE_KEY_ANDROID_PATH = "../android/app/src/main/java/com/apollopatient/MainApplication.java"
WEBENGAGE_KEY_IOS_PATH = "../ios/ApolloPatient/Info.plist"
WEBENGAGE_KEY = {
	"PROD" => "in~~c2ab3533",
	"OTHER" => "in~~c2ab3529"
}
# JS bundle for Android debug build
ANDROID_JS_BUNDLE_COMMAND = "cd .. && react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res"
# IOS JS bundle
IOS_JS_BUNDLE_COMMAND = "cd .. && react-native bundle --entry-file='index.js' --bundle-output='./ios/main.jsbundle' --dev=false --platform='ios' --assets-dest='./ios'"
APPCENTER_API_TOKEN_IOS = "918e4591ba138c7577439edb45602195d451be6a"
APPCENTER_API_TOKEN_ANDROID = "e7db103623b83f14fe332193bce56e90697b3db3"
APPCENTER_OWNER_NAME = "sankeerth.obulam-popcornapps.com"
APPCENTER_APP_NAME_IOS = "Apollo"
APPCENTER_APP_NAME_ANDROID = "Apollo-1"
APPCENTER_DISTRIBUTE_DESTINATIONS = "Internal Testers,Apollo247_Internal"
# Edit Release Notes Here
APPCENTER_DISTRIBUTE_RELEASE_NOTES = "
| Key | | Value |
| :--- | :----: | :--- |
| Environment | | $environment |
| Release | | $release_version |
"
# Set to false if you don't want to notify testers of your new release
APPCENTER_DISTRIBUTE_NOTIFY_TESTERS = true 


private_lane :do_codepush do |options|
	target_version = options[:'t']
	environment = options[:'d']
	platform = options[:'platform']
	is_android = platform === "android"
	appcenter_app_name = "#{APPCENTER_OWNER_NAME}/#{is_android ? APPCENTER_APP_NAME_ANDROID: APPCENTER_APP_NAME_IOS}"
	puts(platform)
	if !environment
		UI.message "Fetching Codepush environments for Android: #{appcenter_app_name}" 
		fetch_command = "appcenter codepush deployment list -a #{appcenter_app_name} --output json"
		sh(fetch_command) do |status, result, command|
			environment_labels = JSON.parse(result).map{|e| e.first}
			environment = UI.select("\nWhat environment do you want to target?", environment_labels);
		end
	end
	matches = File.read(JS_APP_CONFIG_FILE_PATH).scan("AppEnv.#{APP_CONFIG_CODEPUSH_MAPPING[environment]} as AppEnv")
	if matches.length == 0
		UI.error "Error! The codepush deployment target (#{environment}) does not match with appconfig (path: #{JS_APP_CONFIG_FILE_PATH}) environment."
		next # terminate the execution here
	end
	if !target_version
		target_version = UI.input("\nWhich app version do you want to target? [You can also change this later from appcenter]");
	end
	deploy_command = "cd .. && appcenter codepush release-react -a #{appcenter_app_name} -d #{environment} -t #{target_version}"
	sh(deploy_command)
end

private_lane :validate_webengage_key do |options|
	platform = options[:'platform']
	is_android = platform === "android"
	matches = File.read(JS_APP_CONFIG_FILE_PATH).scan("AppEnv.PROD as AppEnv")
	is_prod_env = matches.length > 0
	weg_key = is_prod_env ? "PROD" : "OTHER"
	replace_weg_key = is_prod_env ? "OTHER" : "PROD"
	path_to_check = is_android ? WEBENGAGE_KEY_ANDROID_PATH : WEBENGAGE_KEY_IOS_PATH
	found_weg_Key = File.read(path_to_check).scan(WEBENGAGE_KEY[weg_key])
	puts("Found Webengage Key: #{found_weg_Key}")
	if found_weg_Key.length === 0
		should_update = UI.confirm "\nError! Webengage key does not match with appconfig environment. Expected key is #{WEBENGAGE_KEY[weg_key]}. Do you want to update? [If this is intentional select `No` to proceed.]"
		if should_update
			file_text = File.read(path_to_check)
			new_contents = file_text.gsub(WEBENGAGE_KEY[replace_weg_key], WEBENGAGE_KEY[weg_key])
			File.open(path_to_check, "w") {|file| file.puts new_contents }
		end
	end
end

platform :android do
	desc 'CodePush to Android Environments'
	lane :codepush do |options|
		do_codepush({**options, platform: "android"})
	end

	desc 'Build the Android apk'
	lane :build do
		validate_webengage_key({platform: "android"})
		# gradle(task: 'clean', project_dir: './android/')
		gradle(task: 'assemble', build_type: 'Release', project_dir: './android')
	end

	desc 'Build the Android Debug apk'
	lane :build_debug do
		validate_webengage_key({platform: "android"})
		# gradle(task: 'clean', project_dir: './android/')
		sh(ANDROID_JS_BUNDLE_COMMAND)
		gradle(task: 'assemble', build_type: 'Debug', project_dir: './android')
	end

	desc 'Build the Android bundle'
	lane :bundle do
		validate_webengage_key({platform: "android"})
		gradle(task: 'bundle', build_type: 'Release', project_dir: './android')
	end

	desc 'Build the Android Debug bundle'
	lane :bundle_debug do
		validate_webengage_key({platform: "android"})
		gradle(task: 'assemble', build_type: 'Debug', project_dir: './android')
	end

	desc 'Build the Android apk and bundle'
	lane :build_bundle do
		validate_webengage_key({platform: "android"})
		gradle(task: ['assemble', 'bundle'], build_type: 'Release', project_dir: './android')
	end

	desc 'Upload Android apk to appcenter'
	lane :appcenter_apk do
		validate_webengage_key({platform: "android"})
		gradle(task: 'clean', project_dir: './android/')
		gradle(task: 'assemble', build_type: 'Release', project_dir: './android')
		appcenter_upload(
			api_token: APPCENTER_API_TOKEN_ANDROID,
			owner_name: APPCENTER_OWNER_NAME,
			owner_type: "user", # Default is user - set to organization for appcenter organizations
			app_name: APPCENTER_APP_NAME_ANDROID,
			file: "./android/app/build/outputs/apk/release/app-release.apk",
			upload_build_only: true,
			notify_testers: APPCENTER_DISTRIBUTE_NOTIFY_TESTERS,
			destinations: APPCENTER_DISTRIBUTE_DESTINATIONS,
			release_notes: APPCENTER_DISTRIBUTE_RELEASE_NOTES
		)
	end
end


platform :ios do
	desc 'CodePush to IOS Environments'
	lane :codepush do |options|
		do_codepush({**options, platform: "ios"})
	end

	desc 'Build the ipa'
	lane :build do
		validate_webengage_key({platform: "ios"})
		build_app(
			scheme: "ApolloPatient", 
			workspace: "./ios/ApolloPatient.xcworkspace", 
			export_method: "ad-hoc",
			clean: true,
			silent: true,
			output_directory: "./builds",
			output_name: "Apollo 247.ipa",
			include_symbols: false,
			include_bitcode: false,
			export_options: {
				compileBitcode: false
			},
		)
	end

	desc 'Upload iOS ipa to appcenter'
	lane :appcenter_ipa do
		validate_webengage_key({platform: "ios"})
		build_app(
			scheme: "ApolloPatient", 
			workspace: "./ios/ApolloPatient.xcworkspace", 
			export_method: "ad-hoc",
			clean: true,
			silent: true,
			output_directory: "./builds",
			output_name: "Apollo 247.ipa",
			include_symbols: false,
			include_bitcode: false,
			export_options: {
				compileBitcode: false
			},
		)
		appcenter_upload(
			api_token: APPCENTER_API_TOKEN_IOS,
			owner_name: APPCENTER_OWNER_NAME,
			owner_type: "user", # Default is user - set to organization for appcenter organizations
			app_name: APPCENTER_APP_NAME_IOS,
			file: "./builds/Apollo 247.ipa",
			upload_build_only: true,
			notify_testers: APPCENTER_DISTRIBUTE_NOTIFY_TESTERS,
			destinations: APPCENTER_DISTRIBUTE_DESTINATIONS,
			release_notes: APPCENTER_DISTRIBUTE_RELEASE_NOTES
		)
	end
end
