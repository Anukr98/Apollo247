import '@aph/universal/dist/global';
import {
  Appointment,
  AppointmentCallDetails,
  AppointmentDocuments,
  AppointmentNoShow,
  AppointmentRefunds,
  AppointmentPayments,
  AppointmentSessions,
  CaseSheet,
  ConsultQueueItem,
  DoctorNextAvaialbleSlots,
  ExotelDetails,
  FeedbackDashboardSummary,
  JuniorAppointmentSessions,
  RescheduleAppointmentDetails,
  SdDashboardSummary,
  DoctorFeeSummary,
  PlannedDoctors,
  TransferAppointmentDetails,
  PhrDocumentsSummary,
  JdDashboardSummary,
  AuditHistory,
  CurrentAvailabilityStatus,
  UtilizationCapacity,
  NotificationBin,
  NotificationBinArchive,
  AppointmentUpdateHistory,
} from 'consults-service/entities';
import {
  AdminDoctorMapper,
  AdminUsers,
  BlockedCalendarItem,
  ConsultHours,
  Doctor,
  DoctorAndHospital,
  DoctorBankAccounts,
  DoctorDeviceTokens,
  DoctorLoginSessionHistory,
  DoctorSecretary,
  DoctorSpecialty,
  DoctorsFavouriteAdvice,
  DoctorsFavouriteMedicine,
  DoctorsFavouriteTests,
  Facility,
  Packages,
  Secretary,
  StarTeam,
  Auditor,
  AdminAuditorMapper,
  CityPincodeMapper,
  DoctorPatientExternalConnect,
  Deeplink,
  AdminAuditLogs,
  DoctorProfileHistory,
} from 'doctors-service/entities';
import 'reflect-metadata';
import { createConnections } from 'typeorm';
import {
  Coupon,
  CouponConsultRules,
  CouponGenericRules,
  DiagnosticHotSellers,
  DiagnosticOrderLineItems,
  DiagnosticOrderPayments,
  DiagnosticOrders,
  DiagnosticOrdersStatus,
  DiagnosticOrgans,
  DiagnosticPincodeHubs,
  Diagnostics,
  LoginOtp,
  LoginOtpArchive,
  ReferralCodesMaster,
  ReferalCouponMapping,
  MedicalRecordParameters,
  MedicalRecords,
  MedicineOrderInvoice,
  MedicineOrderLineItems,
  MedicineOrderPayments,
  MedicineOrders,
  MedicineOrdersStatus,
  MedicineOrderShipments,
  MedicineOrderRefunds,
  Patient,
  PatientAddress,
  PatientDeviceTokens,
  PatientFamilyHistory,
  PatientFeedback,
  PatientHealthVault,
  PatientHelpTickets,
  PatientLifeStyle,
  PatientMedicalHistory,
  PatientNotificationSettings,
  SearchHistory,
  RegistrationCodes,
  CouponPharmaRules,
  MedicineOrderCancelReason,
  PharmacologistConsult,
  MedicineOrderAddress
} from 'profiles-service/entities';

export const connect = async () => {
  try {
    createConnections(
      [
        {
          "name": 'consult-db',
          "entities": [Appointment,
            AppointmentCallDetails,
            AppointmentDocuments,
            AppointmentNoShow,
            AppointmentRefunds,
            AppointmentPayments,
            AppointmentSessions,
            CaseSheet,
            ConsultQueueItem,
            DoctorNextAvaialbleSlots,
            ExotelDetails,
            FeedbackDashboardSummary,
            JuniorAppointmentSessions,
            RescheduleAppointmentDetails,
            SdDashboardSummary,
            DoctorFeeSummary,
            PlannedDoctors,
            TransferAppointmentDetails,
            PhrDocumentsSummary,
            JdDashboardSummary,
            AuditHistory,
            CurrentAvailabilityStatus,
            UtilizationCapacity,
            NotificationBin,
            NotificationBinArchive,
            AppointmentUpdateHistory,],
          "type": 'postgres',
          "migrationsRun": true,
          "host": process.env.CONSULTS_DB_HOST,
          "port": parseInt(process.env.CONSULTS_DB_PORT, 10),
          "username": process.env.CONSULTS_DB_USER,
          "password": process.env.CONSULTS_DB_PASSWORD,
          "database": `consults_${process.env.DB_NODE_ENV}`,
          "logging": process.env.NODE_ENV === 'production' ? false : true,
          "synchronize": false,

          "migrations": ["dist/db/migrations/**/*.js"],

          "extra": {
            "connectionLimit": process.env.CONNECTION_POOL_LIMIT,
          },
          "cli": {
            "migrationsDir": "src/consults-service/database/migrations"
          }
        },
        {
          "name": 'doctors-db',
          "entities": [AdminDoctorMapper,
            AdminUsers,
            BlockedCalendarItem,
            ConsultHours,
            Doctor,
            DoctorAndHospital,
            DoctorBankAccounts,
            DoctorDeviceTokens,
            DoctorLoginSessionHistory,
            DoctorSecretary,
            DoctorSpecialty,
            DoctorsFavouriteAdvice,
            DoctorsFavouriteMedicine,
            DoctorsFavouriteTests,
            Facility,
            Packages,
            Secretary,
            StarTeam,
            Auditor,
            AdminAuditorMapper,
            CityPincodeMapper,
            DoctorPatientExternalConnect,
            Deeplink,
            AdminAuditLogs,
            DoctorProfileHistory,],
          "type": 'postgres',
          "host": process.env.DOCTORS_DB_HOST,
          "port": parseInt(process.env.DOCTORS_DB_PORT, 10),
          "username": process.env.DOCTORS_DB_USER,
          "password": process.env.DOCTORS_DB_PASSWORD,
          "database": `doctors_${process.env.DB_NODE_ENV}`,
          "logging": process.env.NODE_ENV === 'production' ? false : true,
          "extra": {
            "connectionLimit": process.env.CONNECTION_POOL_LIMIT,
          },
        },
        {
          "name": 'patients-db',
          "entities": [Coupon,
            CouponConsultRules,
            CouponGenericRules,
            DiagnosticHotSellers,
            DiagnosticOrderLineItems,
            DiagnosticOrderPayments,
            DiagnosticOrders,
            DiagnosticOrdersStatus,
            DiagnosticOrgans,
            DiagnosticPincodeHubs,
            Diagnostics,
            LoginOtp,
            LoginOtpArchive,
            ReferralCodesMaster,
            ReferalCouponMapping,
            MedicalRecordParameters,
            MedicalRecords,
            MedicineOrderInvoice,
            MedicineOrderLineItems,
            MedicineOrderPayments,
            MedicineOrders,
            MedicineOrdersStatus,
            MedicineOrderShipments,
            MedicineOrderRefunds,
            Patient,
            PatientAddress,
            PatientDeviceTokens,
            PatientFamilyHistory,
            PatientFeedback,
            PatientHealthVault,
            PatientHelpTickets,
            PatientLifeStyle,
            PatientMedicalHistory,
            PatientNotificationSettings,
            SearchHistory,
            RegistrationCodes,
            CouponPharmaRules,
            MedicineOrderCancelReason,
            PharmacologistConsult,
            MedicineOrderAddress],
          "type": 'postgres',
          "host": process.env.PROFILES_DB_HOST,
          "port": parseInt(process.env.PROFILES_DB_PORT, 10),
          "username": process.env.PROFILES_DB_USER,
          "password": process.env.PROFILES_DB_PASSWORD,
          "database": `profiles_${process.env.DB_NODE_ENV}`,
          "logging": process.env.NODE_ENV === 'production' ? false : true,
          "extra": {
            "connectionLimit": process.env.CONNECTION_POOL_LIMIT,
          },
        }]
    )
      .then(res => {
        console.log('db connection established');
      })
      .catch(err => {
        console.log('connection error', err)
      })
  } catch (error) {
    console.log('connection error', error)
  }
};
