# This file is for NODE_ENV 'local'

version: '3.4'

services:
  nginx:
    image: nginx:1.16.0-alpine
    tty: true
    env_file: .env
    command: ash -c "
      envsubst '$$API_GATEWAY_HOST $$API_GATEWAY_PORT' < /etc/nginx/conf.d/local.conf.template > /etc/nginx/conf.d/local.conf &&
      nginx -t &&
      nginx -g 'daemon off;'"
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    volumes:
      - ./nginx/log/:/var/log/nginx
      - ./nginx/conf.d/local.conf.template:/etc/nginx/conf.d/local.conf.template/:ro
      - ./packages/web-patients/dist/:/usr/share/nginx/html/web-patients:ro
      - ./packages/web-doctors/dist/:/usr/share/nginx/html/web-doctors:ro

  pgweb:
    image: sosedoff/pgweb:0.11.2
    ports:
      - 8081:8081

  rabbitmq:
    image: rabbitmq:3.7.16-management-alpine
    ports:
      - 15672:15672
      - ${RABBITMQ_PORT}:5672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro

  storage:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    ports:
      - 10000:10000

  api-gateway:
    image: node:12.6.0
    env_file: .env
    working_dir: /apollo-hospitals/packages/api
    command: bash -c "
      while (
      (! curl -s http://${PROFILES_SERVICE_HOST}:${PROFILES_SERVICE_PORT}/graphql) ||
      (! curl -s http://${DOCTORS_SERVICE_HOST}:${DOCTORS_SERVICE_PORT}/graphql) ||
      (! curl -s http://${CONSULTS_SERVICE_HOST}:${CONSULTS_SERVICE_PORT}/graphql) ||
      (! curl -s http://${NOTIFICATIONS_SERVICE_HOST}:${NOTIFICATIONS_SERVICE_PORT}/graphql)
      ) > /dev/null;
      do echo waiting for services to start...; sleep 5;
      done;
      (while ! curl -s http://localhost:${API_GATEWAY_PORT}/graphql > /dev/null;
      do echo waiting for gateway to start...; sleep 5;
      done;
      npm run apollo:download) &
      npm run start:api-gateway"
    volumes:
      - ./:/apollo-hospitals:cached
    depends_on:
      - nginx
      - profiles-service
      - doctors-service
      - consults-service
      - notifications-service
      - rabbitmq
      - storage

  profiles-service:
    image: node:12.6.0
    env_file: .env
    working_dir: /apollo-hospitals/packages/api
    command: bash -c "npm run start:profiles-service"
    volumes:
      - ./:/apollo-hospitals:cached
    depends_on:
      - profiles-db
      - doctors-db

  profiles-db:
    image: postgres:10.8-alpine
    volumes:
      - ./packages/api/src/profiles-service/init-profiles-db.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${PROFILES_DB_USER}
      - POSTGRES_PASSWORD=${PROFILES_DB_PASSWORD}

  doctors-service:
    image: node:12.6.0
    env_file: .env
    working_dir: /apollo-hospitals/packages/api
    command: bash -c "npm run start:doctors-service"
    volumes:
      - ./:/apollo-hospitals:cached
    depends_on:
      - doctors-db

  doctors-db:
    image: postgres:10.8-alpine
    volumes:
      - ./packages/api/src/doctors-service/init-doctors-db.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${DOCTORS_DB_USER}
      - POSTGRES_PASSWORD=${DOCTORS_DB_PASSWORD}

  consults-service:
    image: node:12.6.0
    env_file: .env
    working_dir: /apollo-hospitals/packages/api
    command: bash -c "npm run start:consults-service"
    volumes:
      - ./:/apollo-hospitals:cached
    depends_on:
      - consults-db

  consults-db:
    image: postgres:10.8-alpine
    volumes:
      - ./packages/api/src/consults-service/init-consults-db.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${CONSULTS_DB_USER}
      - POSTGRES_PASSWORD=${CONSULTS_DB_PASSWORD}

  notifications-service:
    image: node:12.6.0
    env_file: .env
    working_dir: /apollo-hospitals/packages/api
    command: bash -c "npm run start:notifications-service"
    volumes:
      - ./:/apollo-hospitals:cached
